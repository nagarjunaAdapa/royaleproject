<?xml version="1.0" encoding="utf-8"?>
<!--

Licensed to the Apache Software Foundation (ASF) under one or more
contributor license agreements.  See the NOTICE file distributed with
this work for additional information regarding copyright ownership.
The ASF licenses this file to You under the Apache License, Version 2.0
(the "License"); you may not use this file except in compliance with
the License.  You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.

-->
<js:View xmlns:fx="http://ns.adobe.com/mxml/2009"
				xmlns:js="library://ns.apache.org/royale/basic">
    <fx:Script>
        <![CDATA[
			import models.ProductsModel;
			
			import org.apache.royale.html.DataGrid;
			
			import products.Product;
			
			import org.apache.royale.collections.ArrayList;
	   
	
			
		private function addValue():void
		{
			var product:Product = new Product("xx100","Nagarjuna",9618685719,"nagarjuna.adapa@WalkingTree.tech");
			(applicationModel as ProductsModel).productList.addItem(product);
			//(applicationModel as ProductsModel).productArray.splice(2,0,product);
		}
		
		/*public function addRow():void
		{
			var contact:Contact = new Contact();
			contact.tile = "Test";
			contact.sales = "Test Sales";
			contacts.addItem(contact);
		}*/
			
		private function removeValue():void
		{
			(applicationModel as ProductsModel).productList.removeItemAt(2);
			(applicationModel as ProductsModel).productArray.splice(2,1);
		}
		
			
		]]>
    </fx:Script>
	
	<fx:Style>
		@namespace js "library://ns.apache.org/royale/basic";
		
		/* Puts a box around each cell of the DataGrids.
		 */
		js|DataGrid .DataItemRenderer {
			border: 1px solid #ACACAC;
			line-height: 40px;
		}
		js|DataGrid .StringItemRenderer {
			border: 1px solid #ACACAC;
			line-height: 40px;
		}
		
		js|DynamicDataGrid {
			border: 0px;
			line-height: 40px;
		}
		
		/* Allows the DataGrid to be specified with percentage widths for the columns (rather
		 * than pixel widths) and does not respond to changes to its dataProvider.
		 */
		.PercentageColumnWidths {
			IBeadLayout: ClassReference("org.apache.royale.html.beads.layouts.DataGridPercentageLayout");
			border: 1px solid #ACACAC;
			}
		
	

	</fx:Style>

	<js:TextButton x="720" y="280" text="Add Row" click="addValue()" />

	
	<js:DynamicDataGrid id="dataGrid2"  x="600" y="310" width="400" height="350" visible="true"
				 rowHeight="40">
		<js:beads>
			<js:ConstantBinding
				sourceID="applicationModel"
				sourcePropertyName="productList"
				destinationPropertyName="dataProvider" />
		</js:beads>
		<js:columns id="columnGrid">
			<!--<js:DataGridColumn label="Image" dataField="image" columnWidth="100" itemRenderer="products.ProductItemRenderer"/>-->
			<js:DataGridColumn label="Name" dataField="name" columnWidth="100" />
			<js:DataGridColumn label="Phone" dataField="phone" columnWidth="100" />
			<js:DataGridColumn label="Email" dataField="email" columnWidth="100" />
		</js:columns>
	</js:DynamicDataGrid>

</js:View>
