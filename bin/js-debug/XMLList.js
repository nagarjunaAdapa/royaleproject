/**
 * Generated by Apache Royale Compiler from XMLList.as
 * XMLList
 *
 * @fileoverview
 *
 * @suppress {missingRequire|checkTypes|accessControls}
 */

goog.provide('XMLList');
/* Royale Dependency List: Namespace,QName,XML,org.apache.royale.debugging.throwError,org.apache.royale.utils.Language*/




/**
 * @constructor
 * @param {Object=} expression
 */
XMLList = function(expression) {
  expression = typeof expression !== 'undefined' ? expression : null;
  
  this.XMLList__xmlArray = [];
  this.XMLList_addIndex(0);
  if (expression != null)
    this.XMLList_parseExpression(expression);
};


/**
 * Prevent renaming of class. Needed for reflection.
 */
goog.exportSymbol('XMLList', XMLList);


/**
 *  mimics the top-level XMLList function (supports 'this' correctly)
 *
 *  @royalesuppressexport
 * @param {*=} val
 * @return {XMLList}
 */
XMLList.conversion = function(val) {
  val = typeof val !== 'undefined' ? val : null;
  return new XMLList(val);
};


/**
 * @private
 * @param {Object} expression
 */
XMLList.prototype.XMLList_parseExpression = function(expression) {
  if (org.apache.royale.utils.Language.is(expression, XMLList)) {
    this.targetObject = expression.targetObject;
    this.targetProperty = expression.targetProperty;
    var /** @type {number} */ len = (expression.length()) >> 0;
    for (var /** @type {number} */ i = 0; i < len; i++) {
      this[i] = expression[i];
    }
  } else if (org.apache.royale.utils.Language.is(expression, XML)) {
    this[0] = expression;
  } else {
    try {
      var /** @type {XML} */ item = new XML(expression);
      if (item.nodeKind() == 'text' && item.getValue() == '')
        return;
      this[0] = item;
    } catch (e) {
      if (typeof(expression) === "string") {
        expression = "<root>" + expression + "</root>";
        try {
          var /** @type {XML} */ xml = new XML(expression);
          var /** @type {XMLList} */ list = xml.children();
          var /** @type {number} */ m = list.length();
          for (var /** @type {number} */ j = 0; j < m; j++) {
            this[j] = list[j];
          }
        } catch (e2) {
          throw e;
        }
      }
      else
        throw e;
    }
  }
};


/**
 * @private
 * @type {Array}
 */
XMLList.prototype.XMLList__xmlArray;


/**
 * @private
 * @param {number} idx
 */
XMLList.prototype.XMLList_addIndex = function(idx) {
  var self = this;
  var /** @type {string} */ idxStr = "" + idx;
  Object.defineProperty(this, idxStr, {"get":function() {
    return self.XMLList__xmlArray[idx];
  }, "set":function(newValue) {
    if (idx >= self.XMLList__xmlArray.length)
      self.append(newValue);
    else
      self.XMLList_replaceChildAt(idx, newValue);
  }, enumerable:true, configurable:true});
};


/**
 * @export
 * @param {XML} child
 */
XMLList.prototype.append = function(child) {
  this.XMLList__xmlArray[this.XMLList__xmlArray.length] = child;
  this.XMLList_addIndex((this.XMLList__xmlArray.length) >> 0);
  do {
    if (!this.XMLList__targetObject)
      break;
    if (!this.XMLList__targetProperty) {
      this.XMLList__targetObject.appendChild(child);
      break;
    }
    var /** @type {XMLList} */ objToAppend = this.XMLList__targetObject.child(this.XMLList__targetProperty);
    if (!objToAppend.length()) {
      this.XMLList__targetObject.appendChild(child);
      break;
    }
    this.XMLList__targetObject.insertChildAfter(objToAppend[objToAppend.length() - 1], child);
  } while (false);
};


/**
 * @export
 * @param {*} child
 * @return {XML}
 */
XMLList.prototype.appendChild = function(child) {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].appendChild(child);
  return null;
};


/**
 * Calls the attribute() method of each XML object and returns an XMLList object of the results.
 * 
 * @asparam attributeName
 * @asreturn 
 * 
 * @export
 * @param {*} attributeName
 * @return {XMLList}
 */
XMLList.prototype.attribute = function(attributeName) {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].attribute(attributeName);
  var /** @type {XMLList} */ retVal = new XMLList();
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {XMLList} */ list = this.XMLList__xmlArray[i].attribute(attributeName);
    if (list.length())
      retVal.concat(list);
  }
  return retVal;
};


/**
 * Calls the attributes() method of each XML object and returns an XMLList object of attributes for each XML object.
 * 
 * @asreturn 
 * 
 * @export
 * @return {XMLList}
 */
XMLList.prototype.attributes = function() {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].attributes();
  var /** @type {XMLList} */ retVal = new XMLList();
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {XMLList} */ list = this.XMLList__xmlArray[i].attributes();
    if (list.length())
      retVal.concat(list);
  }
  return retVal;
};


/**
 * Calls the child() method of each XML object and returns an XMLList object that contains the results in order.
 * 
 * @asparam propertyName
 * @asreturn 
 * 
 * @export
 * @param {Object} propertyName
 * @return {XMLList}
 */
XMLList.prototype.child = function(propertyName) {
  var /** @type {XMLList} */ retVal = new XMLList();
  retVal.targetProperty = propertyName.toString();
  var /** @type {number} */ propNum = parseInt(propertyName, 10);
  if (propNum.toString() == propertyName) {
    if (propNum >= 0 && propNum < this.XMLList__xmlArray.length) {
      retVal.append(this.XMLList__xmlArray[propNum]);
      retVal.targetObject = this.XMLList__xmlArray[propNum];
    }
    return retVal;
  }
  if (this.XMLList_isEmpty()) {
    retVal.targetObject = this;
  }
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].child(propertyName);
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {XMLList} */ list = this.XMLList__xmlArray[i].child(propertyName);
    if (list.length())
      retVal.concat(list);
  }
  return retVal;
};


/**
 * @export
 * @return {number}
 */
XMLList.prototype.childIndex = function() {
  if (this.XMLList_isSingle())
    return (this.XMLList__xmlArray[0].childIndex()) >> 0;
  throw new Error("childIndex can only be called on an XMLList with one item.");
};


/**
 * Calls the children() method of each XML object and returns an XMLList object that contains the results.
 * 
 * @asreturn 
 * 
 * @export
 * @return {XMLList}
 */
XMLList.prototype.children = function() {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].children();
  var /** @type {XMLList} */ retVal = new XMLList();
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {XMLList} */ list = this.XMLList__xmlArray[i].children();
    if (list.length())
      retVal.concat(list);
  }
  return retVal;
};


/**
 * Calls the comments() method of each XML object and returns an XMLList of comments.
 * @asreturn 
 * 
 * @export
 * @return {XMLList}
 */
XMLList.prototype.comments = function() {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].comments();
  var /** @type {XMLList} */ retVal = new XMLList();
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {XMLList} */ list = this.XMLList__xmlArray[i].comments();
    if (list.length())
      retVal.concat(list);
  }
  return retVal;
};


/**
 * @export
 * @param {*} list
 * @return {XMLList}
 */
XMLList.prototype.concat = function(list) {
  if (org.apache.royale.utils.Language.is(list, XML)) {
    var /** @type {XMLList} */ newList = new XMLList();
    newList.append(list);
    list = newList;
  }
  if (!org.apache.royale.utils.Language.is(list, XMLList))
    throw new TypeError("invalid type");
  var /** @type {XML} */ item;
  var /** @type {number} */ len = (list.length()) >> 0;
  var /** @type {number} */ i = 0;
  while (i < len)
    this.append(list[i++]);
  return this;
};


/**
 * Checks whether the XMLList object contains an XML object that is equal to the given value parameter.
 * 
 * @asparam value
 * @asreturn 
 * 
 * @export
 * @param {*} value
 * @return {boolean}
 */
XMLList.prototype.contains = function(value) {
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    if (this.XMLList__xmlArray[i].contains(value))
      return true;
  }
  return false;
};


/**
 * Returns a copy of the given XMLList object.
 * 
 * @asreturn 
 * 
 * @export
 * @return {XMLList}
 */
XMLList.prototype.copy = function() {
  var /** @type {XMLList} */ retVal = new XMLList();
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++)
    retVal.append(this.XMLList__xmlArray[i].copy());
  return retVal;
};


/**
 * Returns all descendants (children, grandchildren, great-grandchildren, and so on) of the XML object that have the given name parameter.
 * 
 * @asparam name
 * @asreturn 
 * 
 * @export
 * @param {Object=} name
 * @return {XMLList}
 */
XMLList.prototype.descendants = function(name) {
  name = typeof name !== 'undefined' ? name : "*";
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].descendants(name);
  var /** @type {XMLList} */ retVal = new XMLList();
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {XMLList} */ list = this.XMLList__xmlArray[i].descendants(name);
    if (list.length())
      retVal.concat(list);
  }
  return retVal;
};


/**
 * Calls the elements() method of each XML object.
 * 
 * @asparam name
 * @asreturn 
 * 
 * @export
 * @param {Object=} name
 * @return {XMLList}
 */
XMLList.prototype.elements = function(name) {
  name = typeof name !== 'undefined' ? name : "*";
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].elements(name);
  var /** @type {XMLList} */ retVal = new XMLList();
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {XMLList} */ list = this.XMLList__xmlArray[i].elements(name);
    if (list.length())
      retVal.concat(list);
  }
  return retVal;
};


/**
 * @export
 * @return {Array}
 */
XMLList.prototype.elementNames = function() {
  var /** @type {Array} */ retVal = [];
  var /** @type {number} */ i = 0;
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  while (i < len)
    retVal.push(i++);
  return retVal;
};


/**
 * @export
 * @param {*} list
 * @return {boolean}
 */
XMLList.prototype.equals = function(list) {
  if (this.XMLList_isSingle())
    return !!(this.XMLList__xmlArray[0].equals(list));
  return false;
};


/**
 * @export
 * @param {Function} callback
 * @return {XMLList}
 */
XMLList.prototype.filter = function(callback) {
  var /** @type {XMLList} */ list = new XMLList();
  for (var /** @type {number} */ i = 0; i < this.XMLList__xmlArray.length; i++) {
    if (callback(this.XMLList__xmlArray[i]))
      list.append(this.XMLList__xmlArray[i]);
  }
  list.targetObject = this.XMLList__targetObject;
  list.targetProperty = this.XMLList__targetProperty;
  return list;
};


/**
 * @export
 * @return {boolean}
 */
XMLList.prototype.hasComplexContent = function() {
  if (this.XMLList_isEmpty())
    return false;
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 1; i < len; i++) {
    if (this.XMLList__xmlArray[i].hasComplexContent())
      return true;
  }
  return false;
};


/**
 * @export
 * @override
 */
XMLList.prototype.hasOwnProperty = function(propertyName) {
  if (this.XMLList_isSingle())
    return !!(this.XMLList__xmlArray[0].hasOwnProperty(propertyName));
  if (parseInt(propertyName, 10).toString() == propertyName) {
    return parseInt(propertyName, 10) < this.XMLList__xmlArray.length;
  }
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 1; i < len; i++) {
    if (this.XMLList__xmlArray[i].hasOwnProperty(propertyName))
      return true;
  }
  return false;
};


/**
 * Checks whether the XMLList object contains simple content.
 * 
 * @asreturn 
 * 
 * @export
 * @return {boolean}
 */
XMLList.prototype.hasSimpleContent = function() {
  if (this.XMLList_isEmpty())
    return true;
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 1; i < len; i++) {
    if (this.XMLList__xmlArray[i].hasComplexContent())
      return false;
  }
  return true;
};


/**
 * Returns the number of items in the XMLList.
 * 
 * @asreturn 
 * 
 * @export
 * @return {number}
 */
XMLList.prototype.length = function() {
  return (this.XMLList__xmlArray.length) >> 0;
};


/**
 * @export
 * @return {QName}
 */
XMLList.prototype.name = function() {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].name();
  return null;
};


/**
 * Merges adjacent text nodes and eliminates empty text nodes for each of the following:
 * all text nodes in the XMLList, all the XML objects contained in the XMLList, and the descendants of all the XML objects in the XMLList.
 * 
 * @asreturn 
 * 
 * @export
 * @return {XMLList}
 */
XMLList.prototype.normalize = function() {
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >>> 0;
  var /** @type {XML} */ textAccumulator;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {XML} */ node = XML.conversion(this.XMLList__xmlArray[i]);
    var /** @type {string} */ nodeKind = node.nodeKind();
    if (nodeKind == 'element') {
      node.normalize();
      textAccumulator = null;
    } else if (nodeKind == 'text') {
      if (textAccumulator) {
        textAccumulator.setValue(textAccumulator.getValue() + node.getValue());
        this.removeChildAt(i);
        i--;
        len--;
      } else {
        textAccumulator = node;
      }
    } else {
      textAccumulator = null;
    }
  }
  return this;
};


/**
 * Returns the parent of the XMLList object if all items in the XMLList object have the same parent.
 * 
 * @asreturn 
 * 
 * @export
 * @return {Object}
 */
XMLList.prototype.parent = function() {
  if (this.XMLList_isEmpty())
    return undefined;
  var /** @type {XML} */ retVal = this.XMLList__xmlArray[0].parent();
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 1; i < len; i++) {
    if (this.XMLList__xmlArray[i].parent() != retVal)
      return undefined;
  }
  return retVal;
};


/**
 * @export
 * @param {*} rightHand
 * @return {*}
 */
XMLList.prototype.plus = function(rightHand) {
  if (org.apache.royale.utils.Language.is(rightHand, XML) || org.apache.royale.utils.Language.is(rightHand, XMLList)) {
    var /** @type {XMLList} */ list = new XMLList();
    list.concat(this);
    list.concat(rightHand);
    if (org.apache.royale.utils.Language.is(rightHand, XML))
      list.targetObject = rightHand; else {
      list.targetObject = rightHand.targetObject;
      list.targetProperty = rightHand.targetProperty;
    }
    return list;
  }
  if (org.apache.royale.utils.Language.is(rightHand, String))
    return this.toString() + rightHand;
  if (org.apache.royale.utils.Language.is(rightHand, Number) && isNaN(rightHand))
    return NaN;
  if (isNaN(Number(this.toString())) || isNaN(Number(rightHand.toString())))
    return this.toString() + rightHand.toString();
  return Number(this.toString()) + rightHand;
};


/**
 * If a name parameter is provided, lists all the children of the XMLList object that contain processing instructions with that name.
 * 
 * @asparam name
 * @asreturn 
 * 
 * @export
 * @param {string=} name
 * @return {XMLList}
 */
XMLList.prototype.processingInstructions = function(name) {
  name = typeof name !== 'undefined' ? name : "*";
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].processingInstructions(name);
  var /** @type {XMLList} */ retVal = new XMLList();
  if (!name)
    return retVal;
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    if (this.XMLList__xmlArray[i].nodeKind() != "processing-instruction")
      continue;
    if (name == "*") {
      retVal.append(this.XMLList__xmlArray[i]);
    }
    else if (name == this.XMLList__xmlArray[i].localName)
      retVal.append(this.XMLList__xmlArray[i]);
  }
  return retVal;
};


/**
 * @export
 * @param {*} child
 */
XMLList.prototype.removeChild = function(child) {
  var /** @type {number} */ i = 0;
  var /** @type {number} */ len = 0;
  //var /** @type {number} */ i = 0;
  //var /** @type {number} */ len = 0;
  if (org.apache.royale.utils.Language.is(child, String)) {
    var /** @type {number} */ propNum = parseInt(child, 10);
    if (propNum.toString() == child) {
      this.removeChildAt((propNum) >> 0);
    } else if (this.XMLList_isSingle()) {
      this.XMLList__xmlArray[0].removeChild(child);
    }
    return;
  }
  if (org.apache.royale.utils.Language.is(child, Number)) {
    i = (child) >> 0;
    this.removeChildAt(i);
    return;
  }
  if (this.XMLList_isSingle())
    this.XMLList__xmlArray[0].removeChild(child); else if (org.apache.royale.utils.Language.is(child, XMLList)) {
    len = (child.length()) >> 0;
    for (i = 0; i < len; i++) {
      this.removeChild(child[i]);
    }
  } else if (org.apache.royale.utils.Language.is(child, XML)) {
    len = (this.XMLList__xmlArray.length - 1) >> 0;
    for (i = len; i >= 0; i--) {
      if (this.XMLList__xmlArray[i] == child) {
        this.XMLList__xmlArray.splice(i, 1);
        if (child.hasAncestor(this.XMLList__targetObject))
          child.parent().removeChild(child);
      }
    }
  }
};


/**
 * @export
 * @param {number} idx
 */
XMLList.prototype.removeChildAt = function(idx) {
  if (idx >= 0 && idx < this.XMLList__xmlArray.length) {
    var /** @type {XML} */ child = this.XMLList__xmlArray[idx];
    this.XMLList__xmlArray.splice(idx, 1);
    if (child.hasAncestor(this.XMLList__targetObject))
      child.parent().removeChild(child);
  }
};


/**
 * @private
 * @param {number} idx
 * @param {*} child
 */
XMLList.prototype.XMLList_replaceChildAt = function(idx, child) {
  var /** @type {number} */ i = 0;
  //var /** @type {number} */ i = 0;
  var /** @type {XML} */ childToReplace = this.XMLList__xmlArray[idx];
  if (childToReplace && this.XMLList__targetObject) {
    this.XMLList__targetObject.replaceChildAt(childToReplace.childIndex(), child);
  }
  if (org.apache.royale.utils.Language.is(child, XML)) {
    this.XMLList__xmlArray[idx] = child;
  } else if (org.apache.royale.utils.Language.is(child, XMLList)) {
    var /** @type {number} */ len = (child.length()) >> 0;
    for (i = 0; i < len; i++) {
      if (i == 0)
        this.XMLList__xmlArray[idx] = child[i];
      else
        this.XMLList__xmlArray.splice(idx + i, 0, child[i]);
    }
  }
  while (idx++ < this.XMLList__xmlArray.length) {
    if (!this.hasOwnProperty(idx))
      this.XMLList_addIndex(idx);
  }
};


/**
 * @private
 * @type {*}
 */
XMLList.prototype.XMLList__targetObject;


/**
 * @private
 * @type {*}
 */
XMLList.prototype.XMLList__targetProperty;


/**
 * @private
 * @return {XML}
 */
XMLList.prototype.XMLList_xmlFromProperty = function() {
  var /** @type {string} */ xmlStr = "<";
  if (org.apache.royale.utils.Language.is(this.XMLList__targetProperty, QName)) {
    if (this.XMLList__targetProperty.prefix)
      xmlStr += this.XMLList__targetProperty.prefix + "::";
    xmlStr += this.XMLList__targetProperty.localName + "/>";
  } else {
    xmlStr += this.XMLList__targetProperty + "/>";
  }
  return new XML(xmlStr);
};


/**
 * @export
 * @param {*} attr
 * @param {string} value
 * @return {string}
 */
XMLList.prototype.setAttribute = function(attr, value) {
  if (this.XMLList_isEmpty() && this.targetObject)
    this.XMLList__xmlArray[0] = this.targetObject.setChild(this.XMLList__targetProperty, this.XMLList_xmlFromProperty());
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++)
    this.XMLList__xmlArray[i].setAttribute(attr, value);
  return value;
};


/**
 * @export
 * @param {*} obj
 * @return {boolean}
 */
XMLList.prototype.hasAncestor = function(obj) {
  if (this.XMLList_isSingle())
    return !!(this.XMLList__xmlArray[0].hasAncestor(obj));
  return false;
};


/**
 * @export
 * @param {XML} child1
 * @param {XML} child2
 * @return {XML}
 */
XMLList.prototype.insertChildAfter = function(child1, child2) {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].insertChildAfter(child1, child2);
  return null;
};


/**
 * @export
 * @param {XML} child1
 * @param {XML} child2
 * @return {XML}
 */
XMLList.prototype.insertChildBefore = function(child1, child2) {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].insertChildAfter(child1, child2);
  return null;
};


/**
 * @export
 * @param {string=} prefix
 * @return {*}
 */
XMLList.prototype.namespace = function(prefix) {
  prefix = typeof prefix !== 'undefined' ? prefix : null;
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].namespace(prefix);
  return null;
};


/**
 * @export
 * @return {string}
 */
XMLList.prototype.nodeKind = function() {
  if (this.XMLList_isSingle())
    return org.apache.royale.utils.Language.string(this.XMLList__xmlArray[0].nodeKind());
  return null;
};


/**
 * @export
 * @param {*} ns
 * @return {XML}
 */
XMLList.prototype.removeNamespace = function(ns) {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].removeNamespace(ns);
  return null;
};


/**
 * @export
 * @param {Object} propertyName
 * @param {*} value
 * @return {*}
 */
XMLList.prototype.replace = function(propertyName, value) {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].replace(propertyName, value);
};


/**
 * @export
 * @param {*} elementName
 * @param {Object} elements
 * @return {Object}
 */
XMLList.prototype.setChild = function(elementName, elements) {
  if (this.XMLList_isEmpty() && this.targetObject)
    this.XMLList__xmlArray[0] = this.targetObject.setChild(this.XMLList__targetProperty, this.XMLList_xmlFromProperty());
  if (this.XMLList_isSingle())
    this.XMLList__xmlArray[0].setChild(elementName, elements);
  return elements;
};


/**
 * @export
 * @param {XML} parent
 */
XMLList.prototype.setParent = function(parent) {
  if (this.XMLList_isSingle())
    this.XMLList__xmlArray[0].setParent(parent);
};


/**
 * @export
 * @param {Object} value
 * @return {XML}
 */
XMLList.prototype.setChildren = function(value) {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].setChildren(value);
  return null;
};


/**
 * @export
 * @param {string} name
 */
XMLList.prototype.setLocalName = function(name) {
  if (this.XMLList_isSingle())
    this.XMLList__xmlArray[0].setLocalName(name);
};


/**
 * @export
 * @param {string} name
 */
XMLList.prototype.setName = function(name) {
  if (this.XMLList_isSingle())
    this.XMLList__xmlArray[0].setName(name);
};


/**
 * @export
 * @param {Namespace} ns
 */
XMLList.prototype.setNamespace = function(ns) {
  if (this.XMLList_isSingle())
    this.XMLList__xmlArray[0].setNamespace(ns);
};


/**
 * Calls the text() method of each XML object and returns an XMLList object that contains the results.
 * 
 * @asreturn 
 * 
 * @export
 * @return {XMLList}
 */
XMLList.prototype.text = function() {
  var /** @type {XMLList} */ retVal = new XMLList();
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {XMLList} */ list = this.XMLList__xmlArray[i].text();
    if (list.length())
      retVal.concat(list);
  }
  return retVal;
};


/**
 * Returns the string representation of this object, formatted according to locale-specific conventions.
 * 
 * @asreturn 
 * 
 * @export
 * @override
 */
XMLList.prototype.toLocaleString = function() {
  var /** @type {Array} */ retVal = [];
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {string} */ str = org.apache.royale.utils.Language.string(this.XMLList__xmlArray[i].toLocaleString());
    if (str)
      retVal.push(str);
  }
  return retVal.join("\n");
};


/**
 * Returns a string representation of all the XML objects in an XMLList object.
 * 
 * @asreturn 
 *
 * @royaleignorecoercion XML
 * @export
 * @return {string}
 */
XMLList.prototype.toString = function() {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].toString();
  var /** @type {Array} */ retVal = [];
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  var /** @type {string} */ cumulativeText = '';
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {string} */ str = this.XMLList__xmlArray[i].toString();
    if (XML.conversion(this.XMLList__xmlArray[i]).nodeKind() == 'text') {
      cumulativeText += this.XMLList__xmlArray[i].toString();
    } else {
      if (cumulativeText) {
        retVal.push(cumulativeText);
        cumulativeText = '';
      }
      retVal.push(this.XMLList__xmlArray[i].toXMLString());
    }
  }
  if (cumulativeText)
    retVal.push(cumulativeText);
  return retVal.join("\n");
};


/**
 * Returns a string representation of all the XML objects in an XMLList object.
 * 
 * @asreturn 
 * 
 * @export
 * @return {string}
 */
XMLList.prototype.toXMLString = function() {
  var /** @type {Array} */ retVal = [];
  var /** @type {number} */ len = (this.XMLList__xmlArray.length) >> 0;
  for (var /** @type {number} */ i = 0; i < len; i++) {
    var /** @type {string} */ str = org.apache.royale.utils.Language.string(this.XMLList__xmlArray[i].toXMLString());
    if (str)
      retVal.push(str);
  }
  return retVal.join("\n");
};


/**
 * Returns the XMLList object.
 * 
 * @asreturn 
 * 
 * @export
 * @override
 */
XMLList.prototype.valueOf = function() {
  if (this.XMLList_isEmpty())
    return "";
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0].valueOf();
  return this.toString();
};


/**
 * @export
 * @param {string} name
 * @return {string}
 */
XMLList.prototype.anchor = function(name) {
  return org.apache.royale.utils.Language.string(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].anchor(name) : "");
};


/**
 * @export
 * @param {number} index
 * @return {string}
 */
XMLList.prototype.charAt = function(index) {
  return org.apache.royale.utils.Language.string(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].charAt(index) : "");
};


/**
 * @export
 * @param {number} index
 * @return {number}
 */
XMLList.prototype.charCodeAt = function(index) {
  return Number(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].charCodeAt(index) : -1);
};


/**
 * @export
 * @param {number} pos
 * @return {number}
 */
XMLList.prototype.codePointAt = function(pos) {
  return Number(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].codePointAt(pos) : -1);
};


/**
 * @export
 * @param {string} searchValue
 * @param {number=} fromIndex
 * @return {number}
 */
XMLList.prototype.indexOf = function(searchValue, fromIndex) {
  fromIndex = typeof fromIndex !== 'undefined' ? fromIndex : 0;
  return Number(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].indexOf(searchValue, fromIndex) : -1);
};


/**
 * @export
 * @param {string} searchValue
 * @param {number=} fromIndex
 * @return {number}
 */
XMLList.prototype.lastIndexOf = function(searchValue, fromIndex) {
  fromIndex = typeof fromIndex !== 'undefined' ? fromIndex : 0;
  return Number(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].lastIndexOf(searchValue, fromIndex) : -1);
};


/**
 * @export
 * @param {string} compareString
 * @param {*=} locales
 * @param {*=} options
 * @return {number}
 */
XMLList.prototype.localeCompare = function(compareString, locales, options) {
  locales = typeof locales !== 'undefined' ? locales : undefined;
  options = typeof options !== 'undefined' ? options : undefined;
  return Number(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].localeCompare(compareString, locales, options) : NaN);
};


/**
 * @export
 * @param {*} regexp
 * @return {Array}
 */
XMLList.prototype.match = function(regexp) {
  return this.XMLList_isSingle() ? this.XMLList__xmlArray[0].match(regexp) : null;
};


/**
 * @export
 * @param {*} regexp
 * @return {number}
 */
XMLList.prototype.search = function(regexp) {
  return Number(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].search(regexp) : -1);
};


/**
 * @export
 * @param {number} beginSlice
 * @param {*=} endSlice
 * @return {string}
 */
XMLList.prototype.slice = function(beginSlice, endSlice) {
  endSlice = typeof endSlice !== 'undefined' ? endSlice : undefined;
  return org.apache.royale.utils.Language.string(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].slice(beginSlice, endSlice) : null);
};


/**
 * @export
 * @param {*=} separator
 * @param {*=} limit
 * @return {Array}
 */
XMLList.prototype.split = function(separator, limit) {
  separator = typeof separator !== 'undefined' ? separator : undefined;
  limit = typeof limit !== 'undefined' ? limit : undefined;
  return this.XMLList_isSingle() ? this.XMLList__xmlArray[0].split(separator, limit) : null;
};


/**
 * @export
 * @param {number} start
 * @param {*=} length
 * @return {string}
 */
XMLList.prototype.substr = function(start, length) {
  length = typeof length !== 'undefined' ? length : undefined;
  return org.apache.royale.utils.Language.string(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].substr(start, length) : null);
};


/**
 * @export
 * @param {number} indexStart
 * @param {*=} indexEnd
 * @return {string}
 */
XMLList.prototype.substring = function(indexStart, indexEnd) {
  indexEnd = typeof indexEnd !== 'undefined' ? indexEnd : undefined;
  return org.apache.royale.utils.Language.string(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].substring(indexStart, indexEnd) : null);
};


/**
 * @export
 * @return {string}
 */
XMLList.prototype.toLocaleLowerCase = function() {
  return org.apache.royale.utils.Language.string(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].toLocaleLowerCase() : null);
};


/**
 * @export
 * @return {string}
 */
XMLList.prototype.toLocaleUpperCase = function() {
  return org.apache.royale.utils.Language.string(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].toLocaleUpperCase() : null);
};


/**
 * @export
 * @return {string}
 */
XMLList.prototype.toLowerCase = function() {
  return org.apache.royale.utils.Language.string(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].toLowerCase() : null);
};


/**
 * @export
 * @return {string}
 */
XMLList.prototype.toUpperCase = function() {
  return org.apache.royale.utils.Language.string(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].toUpperCase() : null);
};


/**
 * @export
 * @return {string}
 */
XMLList.prototype.trim = function() {
  return org.apache.royale.utils.Language.string(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].trim() : null);
};


/**
 * @export
 * @param {*=} fractionDigits
 * @return {number}
 */
XMLList.prototype.toExponential = function(fractionDigits) {
  fractionDigits = typeof fractionDigits !== 'undefined' ? fractionDigits : undefined;
  return Number(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].toExponential(fractionDigits) : NaN);
};


/**
 * @export
 * @param {number=} digits
 * @return {number}
 */
XMLList.prototype.toFixed = function(digits) {
  digits = typeof digits !== 'undefined' ? digits : 0;
  return Number(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].toFixed(digits) : NaN);
};


/**
 * @export
 * @param {*=} precision
 * @return {number}
 */
XMLList.prototype.toPrecision = function(precision) {
  precision = typeof precision !== 'undefined' ? precision : undefined;
  return Number(this.XMLList_isSingle() ? this.XMLList__xmlArray[0].toPrecision(precision) : NaN);
};


/**
 * @private
 * @return {boolean}
 */
XMLList.prototype.XMLList_isEmpty = function() {
  return this.XMLList__xmlArray.length == 0;
};


/**
 * @private
 * @return {boolean}
 */
XMLList.prototype.XMLList_isSingle = function() {
  return this.XMLList__xmlArray.length == 1;
};


/**
 * This coerces single-item XMLList objects to XML for cases where the type is expected to be XML
 * @export
 * @return {XML}
 */
XMLList.prototype.toXML = function() {
  if (this.XMLList_isSingle())
    return this.XMLList__xmlArray[0];
  org.apache.royale.debugging.throwError("Incompatible assignment of XMLList to XML");
  return null;
};


XMLList.prototype.get__targetObject = function() {
  return this.XMLList__targetObject;
};


XMLList.prototype.set__targetObject = function(value) {
  this.XMLList__targetObject = value;
};


XMLList.prototype.get__targetProperty = function() {
  return this.XMLList__targetProperty;
};


XMLList.prototype.set__targetProperty = function(value) {
  this.XMLList__targetProperty = value;
};


Object.defineProperties(XMLList.prototype, /** @lends {XMLList.prototype} */ {
/**
  * @export
  * @type {*} */
targetObject: {
get: XMLList.prototype.get__targetObject,
set: XMLList.prototype.set__targetObject},
/**
  * @export
  * @type {*} */
targetProperty: {
get: XMLList.prototype.get__targetProperty,
set: XMLList.prototype.set__targetProperty}}
);


/**
 * Metadata
 *
 * @type {Object.<string, Array.<Object>>}
 */
XMLList.prototype.ROYALE_CLASS_INFO = { names: [{ name: 'XMLList', qName: 'XMLList', kind: 'class' }] };



/**
 * Reflection
 *
 * @return {Object.<string, Function>}
 */
XMLList.prototype.ROYALE_REFLECTION_INFO = function () {
  return {
    variables: function () {return {};},
    accessors: function () {
      return {
        'targetObject': { type: '*', access: 'readwrite', declaredBy: 'XMLList'},
        'targetProperty': { type: '*', access: 'readwrite', declaredBy: 'XMLList'}
      };
    },
    methods: function () {
      return {
        '|conversion': { type: 'XMLList', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: true } ]; }},
        'XMLList': { type: '', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Object', optional: true } ]; }},
        'append': { type: 'void', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'XML', optional: false } ]; }},
        'appendChild': { type: 'XML', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'attribute': { type: 'XMLList', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'attributes': { type: 'XMLList', declaredBy: 'XMLList'},
        'child': { type: 'XMLList', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Object', optional: false } ]; }},
        'childIndex': { type: 'int', declaredBy: 'XMLList'},
        'children': { type: 'XMLList', declaredBy: 'XMLList'},
        'comments': { type: 'XMLList', declaredBy: 'XMLList'},
        'concat': { type: 'XMLList', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'contains': { type: 'Boolean', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'copy': { type: 'XMLList', declaredBy: 'XMLList'},
        'descendants': { type: 'XMLList', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Object', optional: true } ]; }},
        'elements': { type: 'XMLList', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Object', optional: true } ]; }},
        'elementNames': { type: 'Array', declaredBy: 'XMLList'},
        'equals': { type: 'Boolean', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'filter': { type: 'XMLList', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Function', optional: false } ]; }},
        'hasComplexContent': { type: 'Boolean', declaredBy: 'XMLList'},
        'hasOwnProperty': { type: 'Boolean', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'hasSimpleContent': { type: 'Boolean', declaredBy: 'XMLList'},
        'length': { type: 'int', declaredBy: 'XMLList'},
        'name': { type: 'QName', declaredBy: 'XMLList'},
        'normalize': { type: 'XMLList', declaredBy: 'XMLList'},
        'parent': { type: 'Object', declaredBy: 'XMLList'},
        'plus': { type: '*', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'processingInstructions': { type: 'XMLList', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'String', optional: true } ]; }},
        'removeChild': { type: 'void', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'removeChildAt': { type: 'void', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'int', optional: false } ]; }},
        'setAttribute': { type: 'String', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false },{ index: 2, type: 'String', optional: false } ]; }},
        'hasAncestor': { type: 'Boolean', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'insertChildAfter': { type: 'XML', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'XML', optional: false },{ index: 2, type: 'XML', optional: false } ]; }},
        'insertChildBefore': { type: 'XML', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'XML', optional: false },{ index: 2, type: 'XML', optional: false } ]; }},
        'namespace': { type: '*', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'String', optional: true } ]; }},
        'nodeKind': { type: 'String', declaredBy: 'XMLList'},
        'removeNamespace': { type: 'XML', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'replace': { type: '*', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Object', optional: false },{ index: 2, type: '*', optional: false } ]; }},
        'setChild': { type: 'Object', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false },{ index: 2, type: 'Object', optional: false } ]; }},
        'setParent': { type: 'void', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'XML', optional: false } ]; }},
        'setChildren': { type: 'XML', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Object', optional: false } ]; }},
        'setLocalName': { type: 'void', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'String', optional: false } ]; }},
        'setName': { type: 'void', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'String', optional: false } ]; }},
        'setNamespace': { type: 'void', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Namespace', optional: false } ]; }},
        'text': { type: 'XMLList', declaredBy: 'XMLList'},
        'toLocaleString': { type: 'String', declaredBy: 'XMLList'},
        'toString': { type: 'String', declaredBy: 'XMLList'},
        'toXMLString': { type: 'String', declaredBy: 'XMLList'},
        'valueOf': { type: '*', declaredBy: 'XMLList'},
        'anchor': { type: 'String', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'String', optional: false } ]; }},
        'charAt': { type: 'String', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Number', optional: false } ]; }},
        'charCodeAt': { type: 'Number', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Number', optional: false } ]; }},
        'codePointAt': { type: 'Number', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Number', optional: false } ]; }},
        'indexOf': { type: 'Number', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'String', optional: false },{ index: 2, type: 'Number', optional: true } ]; }},
        'lastIndexOf': { type: 'Number', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'String', optional: false },{ index: 2, type: 'Number', optional: true } ]; }},
        'localeCompare': { type: 'Number', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'String', optional: false },{ index: 2, type: '*', optional: true },{ index: 3, type: '*', optional: true } ]; }},
        'match': { type: 'Array', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'search': { type: 'Number', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: false } ]; }},
        'slice': { type: 'String', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Number', optional: false },{ index: 2, type: '*', optional: true } ]; }},
        'split': { type: 'Array', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: true },{ index: 2, type: '*', optional: true } ]; }},
        'substr': { type: 'String', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Number', optional: false },{ index: 2, type: '*', optional: true } ]; }},
        'substring': { type: 'String', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'Number', optional: false },{ index: 2, type: '*', optional: true } ]; }},
        'toLocaleLowerCase': { type: 'String', declaredBy: 'XMLList'},
        'toLocaleUpperCase': { type: 'String', declaredBy: 'XMLList'},
        'toLowerCase': { type: 'String', declaredBy: 'XMLList'},
        'toUpperCase': { type: 'String', declaredBy: 'XMLList'},
        'trim': { type: 'String', declaredBy: 'XMLList'},
        'toExponential': { type: 'Number', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: true } ]; }},
        'toFixed': { type: 'Number', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: 'int', optional: true } ]; }},
        'toPrecision': { type: 'Number', declaredBy: 'XMLList', parameters: function () { return [ { index: 1, type: '*', optional: true } ]; }},
        'toXML': { type: 'XML', declaredBy: 'XMLList'}
      };
    }
  };
};
/**
 * @export
 * @const
 * @type {number}
 */
XMLList.prototype.ROYALE_REFLECTION_INFO.compileFlags = 10;
